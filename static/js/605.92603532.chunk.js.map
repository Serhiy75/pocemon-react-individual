{"version":3,"file":"static/js/605.92603532.chunk.js","mappings":"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","sources":["components/Timer/TimerModal.jsx","components/Timer/Timer.styled.js","components/Timer/Modal.styled.js","components/Timer/Timer.jsx","components/VelcomImage/VelcomImage.styled.js","components/VelcomImage/VelcomImage.jsx","pages/Home.styled.js","pages/Home.jsx"],"sourcesContent":["import { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst ONE_SECOND = 1000;\n\nfunction formatTime(time) {\n  const hours = String(time.getHours()).padStart(2, '0');\n  const minutes = String(time.getMinutes()).padStart(2, '0');\n  const seconds = String(time.getSeconds()).padStart(2, '0');\n\n  return `${hours}:${minutes}:${seconds}`;\n}\n\nexport const TimerModal = () => {\n  const [time, setTime] = useState(new Date());\n  const [timerRunning, setTimerRunning] = useState(false);\n  const intervalId = useRef(null);\n\n  const handleToggleTimer = () => {\n    setTimerRunning(prev => !prev);\n  };\n\n  useEffect(() => {\n    if (timerRunning) {\n      intervalId.current = setInterval(() => setTime(new Date()), ONE_SECOND);\n    } else {\n      clearInterval(intervalId.current);\n    }\n    return () => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current);\n      }\n    };\n  }, [timerRunning]);\n\n  return (\n    <>\n      <h2>{formatTime(time)}</h2>\n      <button\n        onClick={handleToggleTimer}\n        type=\"button\"\n        className=\"btn btn-primary\"\n      >\n        Start/Stop\n      </button>\n    </>\n  );\n};\n\n// export class TimerModal extends Component {\n//   state = {\n//     time: new Date(),\n//   };\n\n//   intervalId = null;\n\n//   componentDidMount() {\n//     this.intervalId = setInterval(() => {\n//       // console.log(\"setInterval\");\n//       this.setState({ time: new Date() });\n//     }, ONE_SECOND);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.intervalId);\n//   }\n\n//   formatTime() {\n//     const { time } = this.state;\n\n//     const hours = String(time.getHours()).padStart(2, \"0\");\n//     const minutes = String(time.getMinutes()).padStart(2, \"0\");\n//     const seconds = String(time.getSeconds()).padStart(2, \"0\");\n\n//     return `${hours}:${minutes}:${seconds}`;\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"d-flex flex-column justify-content-center align-items-center p-5 text-bg-dark rounded-3 mb-5\">\n//         <h2 className=\"h1 m-5\">{this.formatTime()}</h2>\n//         <button type=\"button\" className=\"btn btn-primary\">Start</button>\n//         <button type=\"button\" className=\"btn btn-danger\">Stop</button>\n//       </div>\n//     );\n//   }\n// }\n","import styled from 'styled-components';\n\nexport const OpenTimer = styled.button`\n  display: block;\n  margin-left: auto;\n`;\nexport const Container = styled.div`\n  position: absolute;\n  bottom: 60px;\n  right: 40px;\n`;\n","import styled from 'styled-components';\n\nexport const ModalStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* position: absolute; */\n  justify-content: center;\n  align-items: center;\n  border: 1px solid black;\n  background-color: whitesmoke;\n  border-radius: 10px;\n  padding: 10px;\n  gap: 10px;\n  width: 250px;\n  height: 100px;\n  left: 3%;\n  top: 289px;\n`;\n","import { Component } from 'react';\n\nimport { TimerModal } from './TimerModal';\n\nimport { GiClockwork } from 'react-icons/gi';\nimport { Container, OpenTimer } from './Timer.styled';\nimport { ModalStyled } from './Modal.styled';\n\nexport class Timer extends Component {\n  state = {\n    isOpen: false,\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    return (\n      <Container>\n        {isOpen && (\n          <ModalStyled handleClick={this.toggle}>\n            <TimerModal />\n          </ModalStyled>\n        )}\n        <OpenTimer type=\"button\" onClick={this.toggle}>\n          <GiClockwork size={64} color=\"#ff00e5\" />\n        </OpenTimer>\n      </Container>\n    );\n  }\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: block;\n  margin: 0 auto;\n`;\nexport const FamelyImg = styled.img`\n  display: block;\n  width: 700px;\n  height: 500px;\n  border: none;\n  margin: 0 auto;\n  border-radius: 20px;\n`;\n","import VelcomFamily from 'images/welcome-to-the-family.gif';\nimport { Container, FamelyImg } from './VelcomImage.styled';\n\nexport const VelcomImage = () => {\n  return (\n    <Container>\n      <FamelyImg src={VelcomFamily} alt=\"Velcome to the family\" />\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledHome = styled.div`\n  display: flex;\n  margin: 0 auto;\n  /* background-color: #dfe6e6; */\n  height: 100vh;\n  width: 100%;\n  padding-top: 30px;\n`;\n","// import { Section } from 'components/Section/Section';\n\nimport { Timer } from 'components/Timer';\nimport { VelcomImage } from 'components/VelcomImage/VelcomImage';\nimport { StyledHome } from './Home.styled';\nimport { CastomCalendar } from 'components/CastomCalendar/CastomCalendar';\nimport { MediaQuery } from 'components/MediaQuery/MediaQuery';\n\nconst Home = () => {\n  return (\n    // <Section>\n    <StyledHome>\n      <VelcomImage />\n      <Timer />\n      <MediaQuery device=\"desktop\">\n        <CastomCalendar />\n      </MediaQuery>\n    </StyledHome>\n    // </Section>\n  );\n};\n\nexport default Home;\n"],"names":["formatTime","time","hours","String","getHours","padStart","minutes","getMinutes","seconds","getSeconds","concat","TimerModal","_useState","useState","Date","_useState2","_slicedToArray","setTime","_useState3","_useState4","timerRunning","setTimerRunning","intervalId","useRef","useEffect","current","setInterval","clearInterval","_jsxs","_Fragment","children","_jsx","onClick","prev","type","className","OpenTimer","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","ModalStyled","Timer","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","state","isOpen","toggle","setState","prevState","_createClass","key","value","this","handleClick","GiClockwork","size","color","Component","FamelyImg","VelcomImage","src","VelcomFamily","alt","StyledHome","MediaQuery","device","CastomCalendar"],"sourceRoot":""}