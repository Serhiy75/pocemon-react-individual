{"version":3,"file":"static/js/656.7316919a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"register\":\"RegisterForm_register__qF0Cb\",\"labeltitle\":\"RegisterForm_labeltitle__EpNVU\",\"button\":\"RegisterForm_button__B3hFq\",\"error\":\"RegisterForm_error__yDHjz\"};","import { useDispatch } from 'react-redux';\nimport css from './RegisterForm.module.css';\nimport { Link } from 'react-router-dom';\nimport { register } from 'redux/auth/operation';\nimport { Field, Formik, Form, ErrorMessage } from 'formik';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'the name must containe min two leters')\n    .required('name is required')\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'pleas enter valid name, only leters'\n    ),\n  email: yup\n    .string()\n    .email('email is not valid')\n    .min(6, 'the email must containe min six leters')\n    .required('email is required')\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9]+[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$/,\n      'email is not valid'\n    ),\n  password: yup\n    .string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Must match \"password\" field value'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (values.password !== values.confirmPassword) {\n      Notiflix.Notify.failure(' перевірте пароль!');\n      return;\n    }\n\n    dispatch(register(values))\n      .unwrap()\n      .then(() => {\n        resetForm();\n        Notiflix.Notify.success('success');\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('error');\n      });\n  };\n\n  return (\n    <div className={css.register}>\n      <h2 className={css.labeltitle}>Registration</h2>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n        }}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        <Form className={css.form}>\n          <div className={css.label}>\n            <Field\n              className={css.input}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Enter your name\"\n            />\n            <ErrorMessage name=\"name\" className={css.error} component=\"div\" />\n          </div>\n          <div className={css.label}>\n            <Field\n              className={css.input}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n            />\n            <ErrorMessage name=\"email\" className={css.error} component=\"div\" />\n          </div>\n          <div className={css.label}>\n            <Field\n              className={css.input}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n            />\n            <ErrorMessage\n              name=\"password\"\n              className={css.error}\n              component=\"div\"\n            />\n          </div>\n          <div className={css.label}>\n            <Field\n              type=\"password\"\n              name=\"confirmPassword\"\n              placeholder=\"confirm password\"\n              className={css.input}\n            />\n            <ErrorMessage\n              name=\"confirmPassword\"\n              className={css.error}\n              component=\"div\"\n            />\n          </div>\n          <button type=\"submit\" className={css.button}>\n            Register\n          </button>\n        </Form>\n      </Formik>\n      <Link to=\"/login\">log in</Link>\n    </div>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["validationSchema","yup","shape","name","min","required","trim","matches","email","password","confirmPassword","oneOf","RegisterForm","dispatch","useDispatch","_jsxs","className","css","children","_jsx","Formik","initialValues","onSubmit","values","_ref","resetForm","register","unwrap","then","Notiflix","catch","Form","Field","type","placeholder","ErrorMessage","component","Link","to"],"sourceRoot":""}