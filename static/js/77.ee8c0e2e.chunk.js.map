{"version":3,"file":"static/js/77.ee8c0e2e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.styled.js","components/TogglePasswordVisibility/TogglePasswordVisibility.js","components/RegisterForm/RegisterForm.jsx","helpers/usePasswordToggle.js","pages/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"register\":\"RegisterForm_register__qF0Cb\",\"labeltitle\":\"RegisterForm_labeltitle__EpNVU\",\"button\":\"RegisterForm_button__B3hFq\",\"error\":\"RegisterForm_error__yDHjz\"};","import styled from 'styled-components';\n\nexport const PasswordIconLook = styled.div`\n  height: 16px;\n  width: 16px;\n  position: absolute;\n  right: 4%;\n  top: 31%;\n  & svg {\n    color: rgba(64, 123, 255, 1);\n    cursor: pointer;\n  }\n`;\n","import { PasswordIconLook } from 'components/RegisterForm/RegisterForm.styled';\nimport PropTypes from 'prop-types';\n\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\nexport const TogglePasswordIcon = ({ showPassword, onToggle, type }) => {\n  return (\n    <PasswordIconLook type={type}>\n      {showPassword ? (\n        <FaEye onClick={onToggle} />\n      ) : (\n        <FaEyeSlash onClick={onToggle} />\n      )}\n    </PasswordIconLook>\n  );\n};\n\nTogglePasswordIcon.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n  showPassword: PropTypes.bool.isRequired,\n  type: PropTypes.string,\n  // prop \"type\" is intended to indicate the value of the element's position\n};\n","import { useDispatch } from 'react-redux';\nimport css from './RegisterForm.module.css';\nimport { Link } from 'react-router-dom';\nimport { register } from 'redux/auth/operation';\nimport { Field, Formik, Form, ErrorMessage } from 'formik';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\nimport { usePasswordToggle } from 'helpers/usePasswordToggle';\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('email is not valid')\n    .min(6, 'the email must containe min six leters')\n    .required('email is required')\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9]+[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$/,\n      'email is not valid'\n    ),\n  password: yup\n    .string()\n    .required('password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Must match \"password\" field value'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    'password1',\n    'password2',\n  ]);\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    dispatch(register({ name, email, password }))\n      .unwrap()\n      .then(() => {\n        resetForm();\n        Notiflix.Notify.success('success');\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('error');\n      });\n  };\n\n  return (\n    <div className={css.register}>\n      <h2 className={css.labeltitle}>Registration</h2>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n        }}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ errors, touched }) => {\n          return (\n            <Form className={css.form}>\n              <div className={css.label}>\n                <Field\n                  className={css.input}\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                />\n                <ErrorMessage\n                  name=\"name\"\n                  className={css.error}\n                  component=\"div\"\n                />\n              </div>\n              <div className={css.label}>\n                <Field\n                  className={css.input}\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                />\n                <ErrorMessage\n                  name=\"email\"\n                  className={css.error}\n                  component=\"div\"\n                />\n              </div>\n              <div className={css.label}>\n                <Field\n                  className={css.input}\n                  name=\"password\"\n                  type={showPasswords.password1 ? 'text' : 'password'}\n                  placeholder=\"Enter your password\"\n                />\n                {errors.password && touched.password && (\n                  <p className={css.error}>{errors.password}</p>\n                )}\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password1}\n                  onToggle={() => togglePasswordVisibility('password1')}\n                />\n              </div>\n              <div className={css.label}>\n                <Field\n                  type={showPasswords.password2 ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"confirm password\"\n                  className={css.input}\n                />\n                <ErrorMessage\n                  name=\"confirmPassword\"\n                  className={css.error}\n                  component=\"div\"\n                />\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password2}\n                  onToggle={() => togglePasswordVisibility('password2')}\n                />\n              </div>\n              <button type=\"submit\" className={css.button}>\n                Register\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n      <Link to=\"/login\">log in</Link>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport function usePasswordToggle(fields = []) {\n  const initialState = fields.reduce((acc, field) => {\n    acc[field] = false;\n    return acc;\n  }, {});\n\n  const [showPasswords, setShowPasswords] = useState(initialState);\n\n  const togglePasswordVisibility = field => {\n    setShowPasswords(prevState => ({\n      ...prevState,\n      [field]: !prevState[field],\n    }));\n  };\n\n  return { showPasswords, togglePasswordVisibility };\n}\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["PasswordIconLook","styled","_templateObject","_taggedTemplateLiteral","TogglePasswordIcon","_ref","showPassword","onToggle","type","_jsx","children","FaEye","onClick","FaEyeSlash","validationSchema","yup","shape","email","min","required","trim","matches","password","confirmPassword","oneOf","RegisterForm","dispatch","useDispatch","_usePasswordToggle","initialState","arguments","length","undefined","reduce","acc","field","_useState","useState","_useState2","_slicedToArray","showPasswords","setShowPasswords","togglePasswordVisibility","prevState","_objectSpread","_defineProperty","usePasswordToggle","_jsxs","className","css","Formik","initialValues","name","onSubmit","_ref2","resetForm","register","unwrap","then","Notiflix","catch","_ref3","errors","touched","Form","Field","placeholder","ErrorMessage","component","password1","password2","Link","to"],"sourceRoot":""}