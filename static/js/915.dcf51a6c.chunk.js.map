{"version":3,"file":"static/js/915.dcf51a6c.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/TogglePasswordVisibility/TogglePasswordVisibility.js","helpers/usePasswordToggle.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form } from 'formik';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const WrapperForm = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  border-radius: 10px;\n  max-width: 380px;\n\n  padding: 50px 20px;\n  margin: 130px auto 0;\n  /* background: rgb(121, 6, 167); */\n  background: linear-gradient(\n    90deg,\n    rgba(121, 6, 167, 1) 3%,\n    rgba(9, 9, 121, 1) 35%,\n    rgba(6, 84, 82, 1) 100%\n  );\n`;\n\nexport const Title = styled.h2`\n  display: block;\n  font-weight: 700;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  color: #d9d9d9;\n`;\nexport const FormContainer = styled(Form)`\n  width: 320px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const FieldBox = styled.div`\n  position: relative;\n  height: 30px;\n  width: 100%;\n  margin-top: 30px;\n`;\n\nexport const FieldInput = styled(Field)`\n  border: none;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  font-weight: 600;\n  font-size: 16px;\n  color: #fff;\n  transition: all 0.2s ease;\n  border-bottom: 1.5px solid #d9d9d9;\n  background-color: transparent;\n  &:hover,\n  &:focus {\n    border-color: #7d2ae8;\n  }\n`;\n\nexport const ErrorBox = styled(ErrorMessage)`\n  color: red;\n  font-weight: 500;\n`;\n\nexport const PasswordIconLook = styled.div`\n  height: 16px;\n  width: 16px;\n  position: absolute;\n  right: 4%;\n  top: 31%;\n  & svg {\n    color: rgba(255, 255, 255, 0.54);\n    cursor: pointer;\n  }\n`;\nexport const Button = styled.button`\n  width: 100px;\n  padding: 6px 18px;\n  border: none;\n  border-radius: 10px;\n  background-color: #7d2ae8;\n  color: white;\n  font-weight: 700;\n  font-size: 16px;\n  margin-top: 40px;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #370c6f;\n  }\n`;\n\nexport const FormLink = styled(Link)`\n  display: flex;\n  justify-content: center;\n  width: 100px;\n  padding: 6px 18px;\n  border: none;\n  border-radius: 10px;\n  background-color: #7d2ae8;\n  color: white;\n  font-weight: 700;\n  font-size: 16px;\n  margin-top: 20px;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #370c6f;\n  }\n`;\n","import { PasswordIconLook } from 'components/RegisterForm/RegisterForm.styled';\nimport PropTypes from 'prop-types';\n\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\nexport const TogglePasswordIcon = ({ showPassword, onToggle, type }) => {\n  return (\n    <PasswordIconLook type={type}>\n      {showPassword ? (\n        <FaEye onClick={onToggle} />\n      ) : (\n        <FaEyeSlash onClick={onToggle} />\n      )}\n    </PasswordIconLook>\n  );\n};\n\nTogglePasswordIcon.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n  showPassword: PropTypes.bool.isRequired,\n  type: PropTypes.string,\n  // prop \"type\" is intended to indicate the value of the element's position\n};\n","import { useState } from 'react';\n\nexport function usePasswordToggle(fields = []) {\n  const initialState = fields.reduce((acc, field) => {\n    acc[field] = false;\n    return acc;\n  }, {});\n\n  const [showPasswords, setShowPasswords] = useState(initialState);\n\n  const togglePasswordVisibility = field => {\n    setShowPasswords(prevState => ({\n      ...prevState,\n      [field]: !prevState[field],\n    }));\n  };\n\n  return { showPasswords, togglePasswordVisibility };\n}\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operation';\nimport { Formik } from 'formik';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\nimport { usePasswordToggle } from 'helpers/usePasswordToggle';\nimport {\n  Button,\n  ErrorBox,\n  FieldBox,\n  FieldInput,\n  FormContainer,\n  FormLink,\n  Title,\n  WrapperForm,\n} from './RegisterForm.styled';\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('email is not valid')\n    .min(6, 'the email must containe min six leters')\n    .required('email is required')\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9]+[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$/,\n      'email is not valid'\n    ),\n  password: yup\n    .string()\n    .required('password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Must match \"password\" field value'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    'password1',\n    'password2',\n  ]);\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    dispatch(register({ name, email, password }))\n      .unwrap()\n      .then(() => {\n        resetForm();\n        Notiflix.Notify.success('success');\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('error');\n      });\n  };\n\n  return (\n    <WrapperForm>\n      <Title>Registration</Title>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n        }}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {() => {\n          return (\n            <FormContainer>\n              <FieldBox>\n                <FieldInput\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                />\n                <ErrorBox name=\"name\" component=\"div\" />\n              </FieldBox>\n              <FieldBox>\n                <FieldInput\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                />\n                <ErrorBox name=\"email\" component=\"div\" />\n              </FieldBox>\n              <FieldBox>\n                <FieldInput\n                  name=\"password\"\n                  type={showPasswords.password1 ? 'text' : 'password'}\n                  placeholder=\"Enter your password\"\n                />\n                <ErrorBox name=\"password\" component=\"div\" />\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password1}\n                  onToggle={() => togglePasswordVisibility('password1')}\n                />\n              </FieldBox>\n              <FieldBox>\n                <FieldInput\n                  type={showPasswords.password2 ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"confirm password\"\n                />\n                <ErrorBox name=\"confirmPassword\" component=\"div\" />\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password2}\n                  onToggle={() => togglePasswordVisibility('password2')}\n                />\n              </FieldBox>\n              <Button type=\"submit\">Register</Button>\n            </FormContainer>\n          );\n        }}\n      </Formik>\n      <FormLink to=\"/login\">log in</FormLink>\n    </WrapperForm>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["WrapperForm","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","FormContainer","Form","_templateObject3","FieldBox","_templateObject4","FieldInput","Field","_templateObject5","ErrorBox","ErrorMessage","_templateObject6","PasswordIconLook","_templateObject7","Button","_templateObject8","FormLink","Link","_templateObject9","TogglePasswordIcon","_ref","showPassword","onToggle","type","_jsx","children","FaEye","onClick","FaEyeSlash","usePasswordToggle","fields","arguments","length","undefined","initialState","reduce","acc","field","_useState","useState","_useState2","_slicedToArray","showPasswords","setShowPasswords","togglePasswordVisibility","prevState","_objectSpread","_defineProperty","validationSchema","yup","shape","email","min","required","trim","matches","password","confirmPassword","oneOf","RegisterForm","dispatch","useDispatch","_usePasswordToggle","_jsxs","Formik","initialValues","name","onSubmit","_ref2","resetForm","register","unwrap","then","Notiflix","catch","placeholder","component","password1","password2","to"],"sourceRoot":""}